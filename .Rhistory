sdlog = NULL)
source(paste0(path, "/Webel/injectOutliers_intensities.R"))
se_outliers <- injectOutliers_normal(se = pimms_data,
freq = 10^-3,
zScore = 3,
inj="both",
lnorm = NULL,
sdlog = NULL)
list_index
index
list_index <- which(index_matrix != 0, arr.ind = TRUE)
list_index
head(index_matrix)
index_matrix[1:5,1:5]
source(paste0(path, "/Webel/injectOutliers_intensities.R"))
se_outliers <- injectOutliers_normal(se = pimms_data,
freq = 10^-3,
zScore = 3,
inj="both",
lnorm = NULL,
sdlog = NULL)
list_index
list_index[1:5,1:5]
list_index[1:5,1:2]
mu
source(paste0(path, "/Webel/injectOutliers_intensities.R"))
se_outliers <- injectOutliers_normal(se = pimms_data,
freq = 10^-3,
zScore = 3,
inj="both",
lnorm = NULL,
sdlog = NULL)
source(paste0(path, "/Webel/injectOutliers_intensities.R"))
se_outliers <- injectOutliers_normal(se = pimms_data,
freq = 10^-3,
zScore = 3,
inj="both",
lnorm = NULL,
sdlog = NULL)
source(paste0(path, "/Webel/injectOutliers_intensities.R"))
se_outliers <- injectOutliers_normal(se = pimms_data,
freq = 10^-3,
zScore = 3,
inj="both",
lnorm = NULL,
sdlog = NULL)
se_outliers
dim(assay(se_outliers, 'logintensities'))
sum(assay(se_outliers, 'logintensities') != (se_outliers, 'trueIntensities'))
sum(assay(se_outliers, 'logintensities') != assay(se_outliers, 'trueIntensities'))
sum(assay(se_outliers, 'logintensities') != assay(se_outliers, 'trueIntensities'), na.rm= T)
sum(assay(se_outliers, 'Outliers'), na.rm= T)
sum(abs(assay(se_outliers, 'Outliers'), na.rm= T))
sum(abs(assay(se_outliers, 'Outliers')), na.rm= T)
source(paste0(path, "/Webel/injectOutliers_intensities.R"))
se_outliers <- injectOutliers_normal(se = pimms_data,
freq = 10^-3,
zScore = 3,
inj="both",
lnorm = NULL,
sdlog = NULL)
sum(index_matrix)
sum(!index_matrix)
sum(abs(index_matrix))
intensities[idxRow,idxCol]
assay(se, 'trueIntensities')[idxRow,idxCol]
sum(assay(se_outliers, 'logintensities') != (se_outliers, 'trueIntensities'))
sum(assay(se_outliers, 'logintensities') != (se_outliers, 'trueIntensities'), na.rm = T)
sum(assay(se_outliers, 'logintensities') != assay(se_outliers, 'trueIntensities'), na.rm = T)
assay(se_outliers, 'logintensities') [1:5,1:5]
assay(se_outliers, 'trueIntensities') [1:5,1:5]
assay(se_outliers, 'Outliers') [1:5,1:5]
sum(assay(se_outliers, 'Outliers'))
head(assay(se_outliers, 'trueIntensities')[(assay(se_outliers, 'Outliers'))!=0])
head(assay(se_outliers, 'Intensities')[(assay(se_outliers, 'Outliers'))!=0])
head(assay(se_outliers, 'intensities')[(assay(se_outliers, 'Outliers'))!=0])
sum(assay(se_outliers, 'intensities') != assay(se_outliers, 'trueIntensities'), na.rm = T)
source(paste0(path, "/Webel/injectOutliers_intensities.R"))
se_outliers <- injectOutliers_normal(se = pimms_data,
freq = 10^-3,
zScore = 3,
inj="both",
lnorm = NULL,
sdlog = NULL)
set.seed(100)
se_outliers <- injectOutliers_normal(se = pimms_data,
freq = 10^-3,
zScore = 3,
inj="both",
lnorm = NULL,
sdlog = NULL)
source(paste0(path, "/Webel/injectOutliers_intensities.R"))
set.seed(100)
se_outliers <- injectOutliers_normal(se = pimms_data,
freq = 10^-3,
zScore = 3,
inj="both",
lnorm = NULL,
sdlog = NULL)
pimms_data
se_outliers
saveRDS(object = se_outliers, file = here(paste0(path,"/Webel/Webel_sce_Marginal_Outliers.RDS")))
write.csv(x = assay(se_outliers,"logintensities"), file = here(paste0(path,"/Webel/Webel_Marginal_Outliers.csv")))
summary((assay(se_outliers,'logintensities')-assay(se_outliers, 'trueIntensities')[assay(se_outliers,'Outliers')!=0])
)
summary(c(unlist((assay(se_outliers,'logintensities')-assay(se_outliers, 'trueIntensities')[assay(se_outliers,'Outliers')!=0]))))
(c(unlist((assay(se_outliers,'logintensities')-assay(se_outliers, 'trueIntensities')[assay(se_outliers,'Outliers')!=0]))))
(c(unlist((assay(se_outliers,'logintensities')-assay(se_outliers, 'trueIntensities'))[assay(se_outliers,'Outliers')!=0])))
summary(c(unlist((assay(se_outliers,'logintensities')-assay(se_outliers, 'trueIntensities'))[assay(se_outliers,'Outliers')!=0])))
summary(abs(c(unlist((assay(se_outliers,'logintensities')-assay(se_outliers, 'trueIntensities'))[assay(se_outliers,'Outliers')!=0]))))
summary(abs(c(unlist((assay(se_outliers,'logintensities'))[assay(se_outliers,'Outliers')==0]))))
summary((c(unlist((assay(se_outliers,'logintensities'))[assay(se_outliers,'Outliers')==0]))))
summary((c(unlist((assay(se_outliers,'trueIntensities')[assay(se_outliers,'Outliers')==0])))))
min(assay(se_outliers,'trueIntensities'))
min(assay(se_outliers,'trueIntensities'),na.rm = T)
max(assay(se_outliers,'trueIntensities'),na.rm = T)
summary(assay(se_outliers,'trueIntensities'),na.rm = T)
summary(c(unlist(assay(se_outliers,'trueIntensities'),na.rm = T)))
summary(c(unlist(assay(se_outliers,'trueIntensities'))))
min(c(unlist(assay(se_outliers,'trueIntensities'))))
min(c(unlist(assay(se_outliers,'trueIntensities'))), na.rm = T)
devtools::load_all("/data/gent/vo/000/gvo00063/Alex/sgdFollowUp/sgdGMFWrapper/BiocSGDGMF/R")
devtools::build()
devtools::install()
devtools::build()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
browseVignettes(package = 'BiocCheck')
browseVignettes(package = 'BiocCheck')
devtools::build()
.Last.error
devtools::build()
R CMD check
devtools::check()
devtools::check()
devtools::check()
?poisson
sgd
sce
example_sce <- mockSCE(ncells = 20, ngenes = 500)
library(sgdGMF)
library(scSGDGMF)
library(dplyr)
library(scuttle)
set.seed(100)
example_sce <- mockSCE(ncells = 20, ngenes = 500)
example_sce
metadata(example_sce, "sgd") <- test
metadata(example_sce, "sgd") <- c(1:5)
example_sce
metadata(example_sce, "sgd") <- c(1:5)
traceback()
?metadata
metadata(example_sce)[["sgd"]] <- c(1:5)
metadata(example_sce)
name <- "SGD"
metadata(example_sce)[[name]] <- c(1:5)
metadata(example_sce)
?assay
scater::altExp
scater:::altExp
scater::::altExp
scater:::altExp
?scater:::altExp
??altExp
?metadata
SummarizedExperiment::`metadata<-`()
SummarizedExperiment::`metadata<-`
??assay<-
?plotPCA
?plotReducedDim
?plotPCA
?plotUMAP
?Reduced dimension plots
\link{\code[scater]{plotReducedDim}}
devtools::document()
mem.maxVSize()
mem.maxVSize()
devtools::document()
rm(list=ls())
mem.maxVSize()
rm(list=ls())
devtools::document()
gc()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::document()
traceback()
roxygen2::roxygenise()
?runSGD
?runSGD_cv
?runSGD
?runSGD_cv
?runSGD
roxygen2::roxygenise()
?runSGD_cv
?runSGD_cv
?plotSGD
?SGDImpute
?plotSGD
?plot_reddim
?plot_reddim
?plotSGD
?plotSGD
?plotSGD
devtools::build()
devtools::build()
devtools::build()
?runSGD_cv
?runSGD
?SGDImpute
?runSGD
?plotSGD
?SGDImpute
?SGDImpute
devtools::build()
?plotSGD
?plotSGD
library(scSGDGMF)
?plotSGD
??plotSGD
?scSGDGMF::plotSGD
?`scater`
?scSGDGMF::plotSGD_cv
devtools::document()
devtools::check()
devtools::check()
?mockSCE
mockSCE()
example_sce <- mockSCE()
example_sce <- logNormCounts(example_sce)
example_sce
assay(example_sce, 'logcounts')[c(1,5,10)] <- NA
example_sce <- mockSCE()
example_sce <- runSGD_cv(example_sce, exprs_values="counts", family = poisson(), ncomponents = c(1:5))
head(metadata(example_sce)[["SGD"]])
example_sce
?scater:::.get_mat_from_sce
scater:::.get_mat_from_sce
devtools::build()
devtools::check()
SummarizedExperiment::metadata(example_sce)
S4Vectors::metadata(example_sce)
?metadata
?`metadata<-`
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
t <- readRDS(file = "/Users/alexandresegers/Projects/Doctoraat/SGDImputationPaper/Analyses/Leduc/Output/sgd_batch_MISTOT10_MNAR0_2.RDS")
t
attr(t, "X")
dim(attr(t, "X"))
dim(attr(t, "U"))
dim(attr(t, "rotation"))
dim(attr(t, "Beta"))
devtools::document()
?SGDImpute
?runSGD
devtools::document()
devtools::document()
devtools::document()
?SGDImpute
?runSGD
devtools::document()
devtools::document()
#' @export
#' @rdname SGDImpute
setMethod("SGDImpute", "ANY", .imputeMissingValues)
devtools::document()
devtools::document()
traceback()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?runPCA
?runSGD
?SGDImpute
?runSGD
devtools::document()
devtools::document()
devtools::document()
?SGDImpute
devtools::document()
?SGDImpute
devtools::document()
devtools::document()
?runSGD
?runPCA
?runPCA
?runSGD
devtools::document()
devtools::document()
rlang::last_trace()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?runSGD
devtools::document()
devtools::document()
devtools::document()
rlang::last_trace()
devtools::document()
devtools::document()
devtools::document()
rlang::last_trace()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
?SGDImpute
set.seed(100)
sce <- mockSCE()
rm(list=ls())
set.seed(100)
sce <- mockSCE()
sce
?mockSCE
sce
altExp(sce)
# Creating a mock SingleCellExperiment
set.seed(100)
sce <- scuttle::mockSCE()
# Removing alternative experiments
altExps(sce) <- NULL
sce
sce <- scater::logNormCounts(sce)
sce
assay(sce, "logintensities") <- assay(sce, "logcounts")
assay(sce, "logintensities")
max(rowSums(assay(sce, "logintensities")==0)
)
max(rowSums(assay(sce, "logintensities")==0))
max(colSums(assay(sce, "logintensities")==0))
dim(sce)
?test_that
test_that("calculateSGD() works", {
res1 <- rnorm(5)
res2 <- rnorm(5)
expect_identical(res1, res2)
})
library(testthat)
test_that("calculateSGD() works", {
res1 <- rnorm(5)
res2 <- rnorm(5)
expect_identical(res1, res2)
})
?with_seed
?scuttle::mockSCE
# Creating a mock SingleCellExperiment
set.seed(100)
sce <- scuttle::mockSCE(ncells = 200, ngenes = 100)
# Removing alternative experiments
altExps(sce) <- NULL
# Create Gaussian experiment
sce <- scater::logNormCounts(sce)
# Create proteomics data with missing values
assay(sce, "logintensities") <- assay(sce, "logcounts")
assay(sce, "logintensities")[assay(sce, "logintensities") == 0] <- NA
max(rowSums(is.naassay(sce, "logintensities")))
max(rowSums(is.na(assay(sce, "logintensities"))))
max(colSums(is.na(assay(sce, "logintensities"))))
sce
test_that("calculateSGD() works on poisson data", {
res1 <- with_seed(100, reducedDim(runSGD(sce), "SGD"))
res2 <- with_seed(100, calculateSGD(sce))
expect_identical(res1, res2)
res3 <- with_seed(100, calculateSGD(assay(sce, 'counts')))
expect_identical(res2, res3)
})
?with_seed
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
dim(matrix(rnorm(ncol(sce)*3), ncol = 3))
dim(matrix(rnorm(ncol(sce)*3), ncol = 3))[2]
expect_equal()
expect_equal(
expect_equal
?expect_equal
devtools::test()
expect_equal(3,5)
expect_equal(3,3.00001)
expect_equal(3,3.0000000000001)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
?plotSGD
?plotReducedDim
?plotPCA
devtools::test()
?expect_ggplot
??expect_ggplot
devtools::test()
devtools::test()
devtools::check()
devtools::documen()
devtools::document()
devtools::check()
warnings()
?runSGD
file.show("scSGDGMF.Rcheck/00check.log")
devtools::check(quiet = FALSE)
?scSGDGMF
?runSGD
devtools::document()
?plotSGD
devtools::document()
?plotSGD
devtools::document()
?SGDImpute
devtools::document()
?sgdGMF
sgdGMF::sgdGMF
devtools::document()
devtools::document()
?scSGDGMF
devtools::document()
devtools::build()
devtools::build()
devtools::check(quiet = FALSE)
BiocCheck::BiocCheck()
traceback()
BiocCheck::BiocCheck()
BiocGenerics:::testPackage()
devtools::use_testthat()
BiocCheck::BiocCheck()
scSGDGMF.BiocCheck
BiocCheck::BiocCheck()
devtools::document
devtools::document()
devtools::check()
devtools::test()
devtools::test()
?altExps
devtools::check()
devtools::check()
?sgdGMF
?`sgdGMF-package`
?scSGDGMF
BiocCheck::BiocCheck()
browseVignettes(package = 'BiocCheck')
devtools::build()
version()
R.version()
version
devtools::build()
install.packages("devtools")
devtools::build()
devtools::install()
devtools::build()
?BiocManager::install
BiocManager::install(version = "devel")
install.packages("BiocManager", version = "devel")
library(BiocManager)
devtools::build()
install.packages()
devtools::install()
devtools::install()
devtools::build()
BiocManager::install("BiocStyle")
devtools::build()
devtools::check()
?BiocNeighbors
devtools::document()
?SGDImpute
devtools::document()
devtools::document()
?SGDImpute
BiocCheck::BiocCheck()
BiocManager::install(BiocCheck)
BiocManager::install("BiocCheck")
BiocCheck::BiocCheck()
?BiocCheck::BiocCheck
?BiocCheck::BiocCheck("new-package")
BiocCheck::BiocCheck("new-package")
BiocCheck::BiocCheck("new-package" = TRUE)
BiocCheck::BiocCheck("new-package" = TRUE)
?runSGD
library(scSGDGMF
)
?runSGD
?runSGD
?runSGD_cv
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(lme4)
library(ggplot2)
library(Matrix)
library(data.table)
