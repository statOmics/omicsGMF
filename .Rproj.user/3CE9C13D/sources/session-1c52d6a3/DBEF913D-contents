---
title: "Missing values: a major hurdle for single-cell proteomics data analysis"
author:
    - name: Christophe Vanderaa
output:
    BiocStyle::html_document:
        self_contained: yes
        toc: true
        toc_float: true
        toc_depth: 2
        code_folding: show
date: "`r BiocStyle::doc_date()`"
package: "`r BiocStyle::pkg_ver('scp')`"
vignette: >
    %\VignetteIndexEntry{Missing values in SCP}
    %\VignetteEngine{knitr::rmarkdown}
    %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
    collapse = TRUE,
    comment = "#>",
    crop = NULL
)
```

# Load packages and data

```{r}
#BiocManager::install("UCLouvain-CBIO/scp")

```

```{r}
#library("scp")

library("scpdata")
library("ggplot2")
library("patchwork")
library("scater")

files.sources = list.files("scp-scplainer/R")
sapply(paste0("scp-scplainer/R/",files.sources), source)

```


```{r}
tmtData <- leduc2022_pSCoPE()
```

## Explore missing values

```{r}
cd <- colData(getWithColData(tmtData, "peptides"))
reportMissingValues(tmtData, "peptides", by = cd$SampleType)
```

```{r}
ji <- jaccardIndex(tmtData, "peptides", by = cd$SampleType)
ggplot(ji) +
    aes(x = jaccard) +
    geom_histogram() +
    facet_grid(~ by)
```

```{r}
csc <- cumulativeSensitivityCurve(
    tmtData, "peptides", by = cd$SampleType, batch = cd$Set, 
    niters = 10, nsteps = 30
)
(plCSC <- ggplot(csc) +
        aes(x = SampleSize, y = Sensitivity, colour = by) +
        geom_point(size = 1) +
        xlab("# TMT runs included") +
        ggtitle("Cumulative sensitivity curve")
)
```


## Data processing

Processing steps already performed: 

1. PSM QC: FDR, PIF, contaminants and decoy, SCR, cell total intensity.
2. Reference normalization
3. Remove duplicate PSM per peptide
4. Zero is NA
5. Cell QC based on CV

For the remainder of this experiment, I keep peptides that have 
at most 90% missing values, meaning they are observed in at least 10%
of the cells. This removes a lot of peptides...

```{r}
nrows(tmtData)[["peptides"]]
tmtData <- filterNA(tmtData, i = "peptides", pNA = 0.9)
nrows(tmtData)[["peptides"]]
```

I also perform the following steps, some that I will compare against 
each other

1. Log2 transformation
2. Median centering the cells
3. KNN imputation

```{r}
## 1.
colData(tmtData[["peptides"]]) <- NULL
tmtData <- logTransform(tmtData, "peptides", name = "peptides_log2")
## 2.
tmtData <- scp:::normalizeSCP(
    tmtData, i = "peptides_log2", method = "center.median",
    name = "peptides_norm_samples"
)
## 3.
tmtData <- impute(
    tmtData, i = "peptides_norm_samples", name = "peptide_impd",
    MARGIN = 1, method = "knn", k = 15, rowmax = 1, colmax = 1, 
    maxp = Inf
)
```

## PCA with missing values

To allow for missing values, I perform PCA using the NIPALS algorithm.

First, without mean centering of the peptides

```{r}
library(nipals)
peptides <- getWithColData(tmtData, "peptides_norm_samples")
begin_time_nipals <- Sys.time()
pcaRes <- .nipalsWrapper(assay(peptides), center = FALSE, ncomp = 50)
end_time_nipals <- Sys.time()
time_difference_nipals <- end_time_nipals - begin_time_nipals
#pcaRes <- nipals(assay(peptides), center = F, maxiter = 50, ncomp = 2)
pcaRes <- .addPcaToList(pcaRes, List(), "nipals")[1]
peptides$cell <- colnames(peptides)
pcaRes <- scpAnnotateResults(pcaRes, colData(peptides), by = "cell")
```



```{r, fig.height=5, fig.width=10}
(figNipals <- scpComponentPlot(
    pcaRes, 
    pointParams = list(aes(colour = SampleType), alpha = 0.5)
)[[1]] +
    scpComponentPlot(
        pcaRes, 
        pointParams = list(aes(colour = lcbatch), alpha = 0.5)
    )[[1]])
```

Then, with mean centering of the peptides

```{r}
peptides <- getWithColData(tmtData, "peptides_norm_samples")
## Centering is performed by nipals::nipals()
begin_time_nipals_centering <- Sys.time()
pcaRes2 <- .nipalsWrapper(assay(peptides), center = TRUE, ncomp = 50)
end_time_nipals_centering <- Sys.time()
time_difference_nipals_centering <- end_time_nipals_centering - begin_time_nipals_centering
pcaRes2 <- .addPcaToList(pcaRes2, List(), "nipals")[1]
peptides$cell <- colnames(peptides)
pcaRes2 <- scpAnnotateResults(pcaRes2, colData(peptides), by = "cell")
```

```{r, fig.height=5, fig.width=10}
(figNipalsCenter <- scpComponentPlot(
    pcaRes2, 
    pointParams = list(aes(colour = SampleType), alpha = 0.5)
)[[1]] +
    scpComponentPlot(
        pcaRes2, 
        pointParams = list(aes(colour = lcbatch), alpha = 0.5)
    )[[1]])
```


Alternatively, because SCP experiment have still relatively small 
number of samples and number of features, we can afford to compute the
correlation matrix using Pearson correlation (assuming MCAR) or the 
information-content-informed Kendall-tau (ICI-Kt) (see
[Flight et al. 2022](http://dx.doi.org/10.1101/2022.02.24.481854)).

TODO

## PCA after KNN imputation

Data after imputation using KNN with K = 15


```{r, fig.height=5, fig.width=10}
peptidesImputed <- getWithColData(tmtData, "peptide_impd")
begin_time_runPCA <- Sys.time()
peptidesImputed <- runPCA(peptidesImputed, exprs_values = 1, ncomponents = 50)
end_time_runPCA <- Sys.time()
time_difference_runPCA <- end_time_runPCA - begin_time_runPCA
(figPCAImputation <- plotPCA(peptidesImputed, colour_by = "SampleType") +
        plotPCA(peptidesImputed, colour_by = "lcbatch"))
```

### Compare PCA plots

```{r, fig.height=7, fig.width=7}

fig <- (figNipals &
     ggtitle("NIPALS")
) +
    (figNipalsCenter  &
         ggtitle("NIPALS after mean centering")
    ) +
    (figPCAImputation &
         ggtitle("PCA after imputation")
    ) +
    plot_layout(design = "12
                          33
                          44")
ggsave(fig, filename = "PCA_plots.pdf")

saveRDS(time_difference_nipals, file = "time_difference_nipals_50.RDS")
saveRDS(time_difference_nipals_centering, file = "time_difference_nipals_centering_50.RDS")
saveRDS(time_difference_runPCA, file = "time_difference_runPCA_50.RDS")
```




```{r}
counts <- (assay(peptides))
counts <- as.data.frame(counts)
counts$protein <- rownames(counts)
#counts$Peptide <- rownames(counts)
counts <- counts[,c("protein",
                    #"Peptide",
                    colnames(peptides))]
rownames(counts) <- NULL
counts[1:5,1:5]
write.csv(x = counts, file = "../scPROTEIN/data/Peptides-raw.csv")
```

